Лексер и парсер
Lexer -( List <Token> )- Parser -( RPN )-(file rpn)- Stack Machine

pip
- Linked List
- Hash Set

_____
SIZE = 100+1
5 лексем:
) Variable: [a-z][a-z0-9]*
) AssignOpt: =
) Digit: 0|([1-9][0-9]*)
) Operation: +|-|\|*
) Digit

<
class Token
String TYPE = "VAR"
String value = "size"
>
———
<
buffer = "size"
1) ждём успех (цикл)
Неуспех: конец строки / нет подходящего регулярного выражения
2) Ждем неуспех (пока перестанет подходить)
3) возвращаемся на шаг назад и очищаем буфер (аккумулятор)
4)

>
_______
Классы Pattern и Match
Для работы с регулярными выражениями

Процесс - это
1) программа
2) контекст
3) данные




_________________________________________

Лексемы - это часть грамматики, которая описываем
минимально синтаксически самостоятельные конструкции ("слова" на языке)
===

Грамматика: терминалы и нетерминали

терминалы - абстракции, которые раскрываются через константы или регулярные выражения

нетерминалы - абстракции, которые раскрываются через терминалы и/или нетерминалы

продукция грамматики - это описание терминали или нетерминала

ТЕРМИНАЛ VAR

VAR -> [a-z][a-z0-9]*
имя продукции тело продукции: константа или регулярное выражение

x = int(123)
if (x) {
print("positiv e 23423")
}

VAR -> [a-z][a-z0-9]
VALUE(LITERAL):DIGIT -> 0|([1-9][0-9]*)
VALUE(LITERAL):STRING -> \"[0-9a-zA-Z\*\\/&\s]*\"
FUNC_NAME -> # ?
IF_KW -> if
L_BRACKET -> (
R_BRACKET -> )
L_BRACE -> {
R_BRACE -> }
QUOTE -> " # ?
ASSIGN_OP -> =
---------—
VAR, STRING, IF_KW, FUNC_NAME

механизм разрешения конфликта: группировка и приоритет
